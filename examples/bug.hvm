// List type
(Head (Cons x xs)) = (Some x)
(Head Nil)         = None

// Something like Rust's Option.unwrap_or
(UnwrapOr (Some x) y) = x
(UnwrapOr None     y) = y

(SumFirstTwo Nil)         = 0 
(SumFirstTwo (Cons x xs)) = (+ x (UnwrapOr (Head xs) 0))

// Iterate a function n times on an input
(Iter f x 0) = x
(Iter f x n) = (f (Iter f x (- n 1)))

//(Fib 0) = 0
(Fib n) = (Head (Iter 
  λxs (Cons (SumFirstTwo xs) xs)
  (Cons 0 (Cons 1 Nil)) 
  n
))


//(Pair 0 0) = (PAIR 0 0)
//(Pair a b) = (PAIR a b)
(Foo x) = (Bar x x)

Main = (Fib 1000000)

//Main = (λfλx(f (f x)) λfλx(f (f x)))

//(Main n) = (λxλy(y) λz(Foo z) 8)

//Main =
  //let ab = (+ $x 1);
  //(Ctr ab ((λ$x 7) 8) ab)

//Main = (λx(x) 7)

//535601498209671957
//535601498209671957

//(F a b) = (+ a b)

//Main =
  //let x = [1 2 3]
  //(Pair x x)





